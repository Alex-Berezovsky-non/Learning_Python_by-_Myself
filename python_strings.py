"""
КОНСПЕКТ ПО РАБОТЕ СО СТРОКАМИ В PYTHON
Источник: https://www.w3schools.com/python/python_strings.asp
"""

# =============================================
# 1. Создание и базовые операции
# =============================================

# 1.1 Создание строк
str1 = 'Hello World'       # Одинарные кавычки
str2 = "Python's strings"  # Двойные кавычки для апострофов
str3 = """Многострочная
строка"""                  # Тройные кавычки для многострочности
str4 = str(3.14)           # Преобразование в строку: "3.14"

print(str3)
# Многострочная
# строка

# 1.2 Индексация и срезы
s = "Python"
print(s[0])    # P (первый символ)
print(s[-1])   # n (последний символ)
print(s[2:5])  # tho (срез с 2 до 4 индекса)

# =============================================
# 2. Основные методы строк
# =============================================

# 2.1 Регистр символов
text = "Hello Python"
print(text.upper())       # HELLO PYTHON
print(text.lower())       # hello python
print("python".capitalize())  # Python

# 2.2 Поиск и замена
print(text.find("lo"))     # 3 (индекс начала подстроки)
print(text.replace("Python", "World"))  # Hello World
print("abc123".isalnum())  # True (только буквы и цифры)

# 2.3 Разделение и соединение
csv = "apple,banana,cherry"
print(csv.split(","))     # ['apple', 'banana', 'cherry']
print(" ".join(["Hello", "World"]))  # Hello World

# 2.4 Очистка строк
dirty = "   some text\n\t"
print(dirty.strip())      # "some text" (удаляет пробелы и \n\t)

# =============================================
# 3. Форматирование строк
# =============================================

# 3.1 f-строки (Python 3.6+)
name = "Alice"
age = 25
print(f"{name} is {age} years old")  # Alice is 25 years old

# 3.2 Метод format()
print("{} + {} = {}".format(2, 3, 2+3))  # 2 + 3 = 5

# 3.3 Старый стиль (%)
print("Value: %.2f" % 3.1415)  # Value: 3.14

# =============================================
# 4. Специальные символы и экранирование
# =============================================

# 4.1 Экранирование
print("Line 1\nLine 2\tTab")  # \n - новая строка, \t - табуляция
print("Кавычки: \"Text\"")     # Экранирование кавычек

# 4.2 Сырые строки (raw strings)
path = r"C:\new_folder\file.txt"  # Игнорирует экранирование
print(path)  # C:\new_folder\file.txt

# =============================================
# 5. Проверки и логические методы
# =============================================

print("HELLO".isupper())      # True
print("123".isdigit())        # True
print("text".startswith("te"))# True
print("file.txt".endswith(".txt"))  # True

# =============================================
# 6. Неизменяемость строк
# =============================================

# Строки нельзя изменить после создания
s = "Hello"
# s[0] = "h"  # Ошибка! 
# Нужно создать новую строку:
s = "h" + s[1:]  # "hello"

# =============================================
# 7. Полезные методы
# =============================================

# 7.1 Подсчет и проверки
print("abracadabra".count("abra"))  # 2
print("Python".index("th"))         # 2 (индекс начала)

# 7.2 Выравнивание
print("text".ljust(10, "-"))  # text------
print("text".center(10, "*")) # ***text***

# 7.3 Кодирование
byte_str = "строка".encode("utf-8") 
print(byte_str)  # b'\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb0'

# =============================================
# 8. Практические примеры
# =============================================

# 8.1 Обработка ввода
user_input = "  user@example.com  "
clean_email = user_input.strip().lower()

# 8.2 Шаблон для URL
template = "https://{}.com"
print(template.format("google"))  # https://google.com

# 8.3 Поиск подстроки
log = "Error: File not found"
if "error" in log.lower():
    print("Обнаружена ошибка")

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Строки неизменяемы: любая операция создает новую строку
2. Используйте f-строки для современного форматирования
3. Основные методы: split(), join(), strip(), replace(), upper()/lower()
4. Срезы [start:end:step] позволяют получать подстроки
5. Проверяйте наличие подстрок оператором in: "abc" in "xyzabc"
6. Экранируйте спецсимволы с помощью \ или используйте сырые строки (r"")
7. Методы isdigit(), isalpha(), isalnum() помогают валидировать данные
8. Для работы с байтами используйте encode()/decode()
9. Индексация начинается с 0, отрицательные индексы отсчитываются с конца
10. Форматирование строк поддерживает сложные выражения: f"{2*3}"
"""