"""
КОНСПЕКТ ПО СТРУКТУРНОМУ СОПОСТАВЛЕНИЮ (MATCH-CASE) В PYTHON
Источник: https://www.w3schools.com/python/python_match.asp
"""

# =============================================
# 1. Базовый синтаксис (Python 3.10+)
# =============================================

# 1.1 Простое сопоставление по значению
status = 404
match status:
    case 200:
        print("Успешно")
    case 404:
        print("Не найдено")  # Выполнится этот блок
    case _:
        print("Ошибка сервера")

# 1.2 Сопоставление с условиями (guard clauses)
value = 15
match value:
    case x if x < 0:
        print("Отрицательное")
    case x if 0 <= x < 10:
        print("Меньше 10")
    case _:
        print("10 или больше")  # Сработает здесь

# =============================================
# 2. Сопоставление с шаблонами
# =============================================

# 2.1 Распаковка последовательностей
data = ["user", "Alice", 30]
match data:
    case [type, name]:
        print(f"{type}: {name}")
    case [type, name, age]:
        print(f"{type}: {name}, {age} лет")  # Сработает
    case _:
        print("Неизвестный формат")

# 2.2 Сопоставление словарей
config = {"type": "csv", "path": "/data"}
match config:
    case {"type": "json", "path": p}:
        print(f"JSON файл: {p}")
    case {"type": "csv" | "excel", "path": p}:  # ИЛИ-условие
        print(f"Таблица: {p}")  # Сработает
    case _:
        print("Неизвестный формат")

# =============================================
# 3. Сопоставление объектов и классов
# =============================================

class User:
    def __init__(self, role, name):
        self.role = role
        self.name = name

user = User("admin", "Alice")
match user:
    case User(role="admin", name=username):
        print(f"Админ: {username}")  # Сработает
    case User(role="user"):
        print("Обычный пользователь")

# =============================================
# 4. Продвинутые сценарии
# =============================================

# 4.1 Вложенные шаблоны
points = [(0, 0), (1, 2)]
match points:
    case []: 
        print("Нет точек")
    case [(0, 0)]: 
        print("Начало координат")
    case [(x1, y1), (x2, y2)] if x1 == x2 and y1 == y2:
        print("Дубликаты точек")
    case _:
        print("Другие точки")  # Сработает

# 4.2 Использование переменных в шаблонах
command = ("move", "right", 5)
match command:
    case ("move", direction, speed):
        print(f"Движение {direction} со скоростью {speed}")  # Сработает
    case ("attack", target):
        print(f"Атака {target}")

# =============================================
# 5. Практические примеры
# =============================================

# 5.1 Обработка HTTP-запросов
def handle_request(request):
    match request:
        case {"method": "GET", "path": "/users"}:
            return "Список пользователей"
        case {"method": "POST", "path": "/login"}:
            return "Авторизация"
        case {"method": _, "path": _}:
            return "Неизвестный запрос"

# 5.2 Валидация данных
def validate(data):
    match data:
        case {"name": str(), "age": int(age)} if age >= 0:
            return True
        case _:
            return False

# 5.3 Обработка математических выражений
expression = ("add", 3, ("sub", 5, 2))
match expression:
    case ("add", a, b):
        result = a + b
    case ("sub", a, b):
        result = a - b
    case _:
        raise ValueError("Неизвестная операция")

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Структурное сопоставление (match-case) доступно с Python 3.10
2. Основные возможности:
   - Сопоставление по значению, типу и структуре данных
   - Распаковка последовательностей и объектов
   - Проверка условий через guard clauses (if в case)
3. Символ _ (wildcard) обрабатывает все остальные случаи
4. Поддерживает:
   - Все типы данных (строки, числа, списки, кортежи, словари)
   - Пользовательские классы
   - Вложенные структуры
5. Преимущества перед if-elif:
   - Более читаемый код для сложных условий
   - Возможность деструктуризации данных
   - Компактный синтаксис для шаблонов
6. Особенности:
   - Выполняется только первый совпавший case
   - Порядок проверки сверху вниз
   - Можно использовать ИЛИ-логику через |
7. Используйте для:
   - Обработки сложных структур данных (JSON, AST)
   - Реализации конечных автоматов
   - Парсинга команд
   - Валидации входных данных
"""