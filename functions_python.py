"""
КОНСПЕКТ ПО ФУНКЦИЯМ В PYTHON
Источник: https://www.w3schools.com/python/python_functions.asp
"""

# =============================================
# 1. Базовый синтаксис
# =============================================

# 1.1 Определение функции
def greet():
    print("Hello, World!")

greet()  # Hello, World!

# 1.2 Функция с параметрами
def add(a: int, b: int) -> int:
    """Возвращает сумму двух чисел"""
    return a + b

print(add(2, 3))  # 5

# 1.3 Параметры по умолчанию
def power(base, exponent=2):
    return base ** exponent

print(power(3))    # 9 (3^2)
print(power(3, 4)) # 81 (3^4)

# =============================================
# 2. Особенности работы с аргументами
# =============================================

# 2.1 Именованные аргументы
def user_info(name, age, city):
    print(f"{name}, {age} лет, из {city}")

user_info(age=25, city="Москва", name="Анна")

# 2.2 Произвольное количество аргументов (*args)
def sum_all(*numbers):
    return sum(numbers)

print(sum_all(1, 2, 3))  # 6

# 2.3 Произвольные именованные аргументы (**kwargs)
def person(**data):
    for key, value in data.items():
        print(f"{key}: {value}")

person(name="Иван", age=30, city="СПб")

# =============================================
# 3. Возврат значений и область видимости
# =============================================

# 3.1 Возврат нескольких значений
def min_max(numbers):
    return min(numbers), max(numbers)

result = min_max([5, 2, 9, 1])
print(result)  # (1, 9)

# 3.2 Локальные и глобальные переменные
x = 10  # Глобальная

def change_x():
    global x
    x = 20

change_x()
print(x)  # 20

# =============================================
# 4. Лямбда-функции
# =============================================

# 4.1 Простая лямбда
square = lambda x: x ** 2
print(square(5))  # 25

# 4.2 Использование с map() и filter()
numbers = [1, 2, 3, 4]
doubled = list(map(lambda x: x*2, numbers))  # [2, 4, 6, 8]
evens = list(filter(lambda x: x%2 == 0, numbers))  # [2, 4]

# =============================================
# 5. Рекурсия и практические примеры
# =============================================

# 5.1 Рекурсивный факториал
def factorial(n):
    return 1 if n <= 1 else n * factorial(n-1)

print(factorial(5))  # 120

# 5.2 Обработка вложенных структур
def flatten(lst):
    result = []
    for item in lst:
        if isinstance(item, list):
            result.extend(flatten(item))
        else:
            result.append(item)
    return result

print(flatten([1, [2, [3, 4], 5]]))  # [1, 2, 3, 4, 5]

# 5.3 Кэширование результатов (мемоизация)
from functools import lru_cache

@lru_cache(maxsize=None)
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(10))  # 55

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Функции определяются через def, принимают параметры и возвращают значения через return
2. Особенности аргументов:
   - Позиционные и именованные
   - Значения по умолчанию
   - *args для произвольного числа позиционных аргументов
   - **kwargs для произвольных именованных аргументов
3. Лямбда-функции: анонимные функции для простых операций
4. Область видимости:
   - Локальные переменные существуют только внутри функции
   - global/nonlocal для доступа к внешним переменным
5. Рекурсия требует базового случая и рекурсивного вызова
6. Декораторы (@lru_cache) расширяют функциональность
7. Best practices:
   - Используйте docstrings для документации
   - Избегайте изменяемых объектов в параметрах по умолчанию
   - Разделяйте функции по ответственности
   - Придерживайтесь принципа DRY (Don't Repeat Yourself)
8. Типичные ошибки:
   - Изменение списков/словарей в аргументах по умолчанию
   - Побочные эффекты (изменение глобальных переменных)
   - Бесконечная рекурсия
"""