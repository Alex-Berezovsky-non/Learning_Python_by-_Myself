"""
КОНСПЕКТ ПО СПИСКАМ В PYTHON
Источник: https://www.w3schools.com/python/python_lists.asp
"""

# =============================================
# 1. Создание и базовые операции
# =============================================

# 1.1 Создание списков
list1 = []                     # Пустой список
list2 = [1, 2, 3]              # Список чисел
list3 = ["apple", True, 2.5]   # Разные типы данных
list4 = list(("a", "b", "c"))  # Конструктор list()

print(list3)  # ['apple', True, 2.5]

# 1.2 Индексация и срезы
fruits = ["apple", "banana", "cherry", "orange"]
print(fruits[1])       # banana (индексы с 0)
print(fruits[-1])      # orange (отрицательные индексы)
print(fruits[1:3])     # ['banana', 'cherry'] (срез)

# =============================================
# 2. Основные методы списков
# =============================================

# 2.1 Добавление элементов
nums = [1, 2, 3]
nums.append(4)          # [1, 2, 3, 4]
nums.insert(1, 1.5)     # [1, 1.5, 2, 3, 4] (индекс, значение)
nums.extend([5,6])      # [1, 1.5, 2, 3, 4, 5, 6]

# 2.2 Удаление элементов
nums.remove(1.5)        # Удаляет первое вхождение
popped = nums.pop(2)    # Удаляет элемент по индексу (возвращает 2)
nums.clear()            # Очистка списка

# 2.3 Поиск и сортировка
letters = ["d", "b", "a", "c"]
print(letters.index("b"))   # 1 (индекс элемента)
print(letters.count("a"))   # 1 (количество вхождений)
letters.sort()              # ['a', 'b', 'c', 'd'] (сортировка на месте)
sorted_letters = sorted(letters)  # Возвращает новый список

# =============================================
# 3. Списковые включения (List Comprehensions)
# =============================================

# 3.1 Простой пример
squares = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]

# 3.2 С условием
even_numbers = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]

# 3.3 Вложенные циклы
pairs = [(x, y) for x in [1,2] for y in [3,4]]  # [(1,3), (1,4), (2,3), (2,4)]

# =============================================
# 4. Копирование списков
# =============================================

original = [1, 2, 3]
shallow_copy = original.copy()     # Поверхностная копия
slice_copy = original[:]           # Копия через срез
# deep_copy = copy.deepcopy(original)  # Для вложенных списков (требует import copy)

# =============================================
# 5. Операции со списками
# =============================================

# 5.1 Конкатенация
list_a = [1, 2] + [3, 4]  # [1, 2, 3, 4]

# 5.2 Повторение
repeated = ["Hi"] * 3      # ['Hi', 'Hi', 'Hi']

# 5.3 Проверка наличия
print(3 in [1, 2, 3])     # True

# =============================================
# 6. Вложенные списки
# =============================================

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print(matrix[1][2])  # 6 (доступ к элементам)
flat = [num for row in matrix for num in row]  # "Выпрямление" матрицы

# =============================================
# 7. Практические примеры
# =============================================

# 7.1 Фильтрация данных
grades = [85, 92, 78, 90, 65]
passed = [g for g in grades if g >= 70]  # [85, 92, 78, 90]

# 7.2 Преобразование типов
str_numbers = ["1", "2", "3"]
int_numbers = list(map(int, str_numbers))  # [1, 2, 3]

# 7.3 Обработка вложенных данных
data = [[1, "a"], [2, "b"], [3, "c"]]
ids = [item[0] for item in data]  # [1, 2, 3]

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Списки изменяемы: элементы можно добавлять/удалять/менять
2. Поддерживают разные типы данных в одном списке
3. Основные методы: append(), insert(), remove(), pop(), sort()
4. Списковые включения — мощный инструмент для создания новых списков
5. Операции: + (конкатенация), * (повторение), in (проверка наличия)
6. Индексация с отрицательными числами: arr[-1] — последний элемент
7. Для копирования используйте copy() или срезы arr[:]
8. Вложенные списки используются для представления матриц
9. Функции: len(), max(), min(), sum(), list() для преобразования
10. Срезы [start:end:step] позволяют гибко выбирать элементы
"""