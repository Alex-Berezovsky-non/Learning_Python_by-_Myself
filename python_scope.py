"""
КОНСПЕКТ ПО ОБЛАСТЯМ ВИДИМОСТИ В PYTHON
Источник: https://www.w3schools.com/python/python_scope.asp
"""

# =============================================
# 1. Основные типы областей видимости
# =============================================

# 1.1 Локальная область (Local)
def my_func():
    x = 10  # Локальная переменная
    print(x)

my_func()  # 10
# print(x)  # Ошибка: x не определена

# 1.2 Нелокальная область (Enclosing)
def outer():
    y = 20  # Нелокальная для inner()
    
    def inner():
        print(y)  # Доступ к y из внешней функции
    
    inner()

outer()  # 20

# 1.3 Глобальная область (Global)
z = 30  # Глобальная переменная

def access_global():
    print(z)  # Доступ к глобальной переменной

access_global()  # 30

# 1.4 Встроенная область (Built-in)
import math

def use_builtin():
    print(math.pi)  # Доступ к встроенной константе

use_builtin()  # 3.14159...

# =============================================
# 2. Правила разрешения имен (LEGB)
# =============================================

# Порядок поиска переменных:
# 1. Local        - текущая функция
# 2. Enclosing    - внешние функции
# 3. Global       - модуль/скрипт
# 4. Built-in     - встроенные имена

# Пример:
value = "global"

def outer():
    value = "enclosing"
    
    def inner():
        value = "local"
        print(value)  # local (ищет от local к built-in)
    
    inner()

outer()

# =============================================
# 3. Ключевые слова global и nonlocal
# =============================================

# 3.1 global - доступ к глобальной переменной
counter = 0

def increment():
    global counter
    counter += 1

increment()
print(counter)  # 1

# 3.2 nonlocal - доступ к переменной внешней функции
def outer():
    count = 0
    
    def inner():
        nonlocal count
        count += 1
    
    inner()
    print(count)  # 1

outer()

# =============================================
# 4. Особенности работы с областями видимости
# =============================================

# 4.1 Затенение переменных
x = 10

def shadow_example():
    x = 20  # Создает новую локальную переменную
    print(x)  # 20

shadow_example()
print(x)  # 10 (глобальная не изменилась)

# 4.2 Изменение изменяемых объектов
my_list = [1, 2, 3]

def modify_list():
    my_list.append(4)  # Работает без global

modify_list()
print(my_list)  # [1, 2, 3, 4]

# 4.3 Лямбда-функции
multiplier = 3
result = list(map(lambda x: x * multiplier, [1, 2, 3]))
print(result)  # [3, 6, 9] (захватывает переменные из внешней области)

# =============================================
# 5. Практические примеры
# =============================================

# 5.1 Замыкания (closures)
def make_counter():
    count = 0
    
    def counter():
        nonlocal count
        count += 1
        return count
    
    return counter

counter = make_counter()
print(counter())  # 1
print(counter())  # 2

# 5.2 Конфигурация с глобальными настройками
DEBUG_MODE = True  # Глобальная конфигурация

def log(message):
    if DEBUG_MODE:
        print(f"[DEBUG] {message}")

log("Запуск системы")  # [DEBUG] Запуск системы

# 5.3 Избегание конфликтов имен
def calculate(values):
    sum = 0  # Локальное имя не конфликтует с глобальным sum()
    for val in values:
        sum += val
    return sum

print(calculate([1, 2, 3]))  # 6
print(sum([1, 2, 3]))        # 6 (встроенная функция)

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Основные области видимости:
   - Local: внутри функции
   - Enclosing: во внешних функциях
   - Global: на уровне модуля
   - Built-in: встроенные имена Python

2. Правила LEGB:
   - Порядок поиска переменных: Local → Enclosing → Global → Built-in
   - Переменная ищется в ближайшей области, где она определена

3. Ключевые слова:
   - global: объявляет переменную как глобальную
   - nonlocal: обеспечивает доступ к переменной внешней функции

4. Особенности:
   - Изменяемые объекты можно изменять без объявления global
   - Замыкания сохраняют состояние через nonlocal
   - Вложенные функции имеют доступ к переменным внешних функций

5. Best practices:
   - Избегайте глобальных переменных где возможно
   - Используйте nonlocal для замыканий вместо глобальных переменных
   - Не переопределяйте встроенные имена (list, sum, dict)
   - Используйте аргументы функций для передачи данных
   - Ограничивайте область видимости переменных

6. Опасные практики:
   - Чрезмерное использование global
   - Неявное затенение имен
   - Изменение глобальных состояний из разных мест

7. Области видимости для:
   - Функций
   - Классов (переменные класса vs экземпляра)
   - Модулей
   - Генераторов и лямбда-функций
"""