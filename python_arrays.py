"""
КОНСПЕКТ ПО МАССИВАМ В PYTHON (МОДУЛЬ ARRAY)
Источник: https://www.w3schools.com/python/python_arrays.asp
"""

# Импорт модуля
from array import array

# =============================================
# 1. Создание массивов
# =============================================

# 1.1 Пустой массив целых чисел
arr_int = array('i')  # 'i' - тип элементов (signed int)

# 1.2 Массив с начальными значениями
arr_float = array('d', [1.5, 2.7, 3.0])  # 'd' - double

# 1.3 Допустимые типы данных:
# 'b' - signed char
# 'B' - unsigned char
# 'i' - signed int
# 'I' - unsigned int
# 'f' - float
# 'd' - double

# =============================================
# 2. Основные операции
# =============================================

# 2.1 Добавление элементов
arr_int.append(10)
arr_int.extend([20, 30, 40])
arr_int.insert(1, 15)  # [10, 15, 20, 30, 40]

# 2.2 Удаление элементов
arr_int.remove(15)      # Удаление по значению
popped = arr_int.pop()  # Удаление последнего элемента (40)
del arr_int[0]          # Удаление по индексу

# 2.3 Доступ и изменение
print(arr_float[1])    # 2.7
arr_float[1] = 3.14    # [1.5, 3.14, 3.0]

# =============================================
# 3. Методы массива
# =============================================

# 3.1 Поиск и подсчет
print(arr_int.index(20))  # 0 (индекс первого вхождения)
print(arr_float.count(3.0))  # 1

# 3.2 Преобразование типов
byte_arr = arr_int.tobytes()  # Байтовое представление
lst = arr_float.tolist()      # Преобразование в список

# 3.3 Дополнительные операции
arr_int.reverse()          # Разворот массива
arr_float = array('d', sorted(arr_float))  # Сортировка

# =============================================
# 4. Сравнение с обычными списками
# =============================================

# 4.1 Преимущества массивов:
# - Эффективность памяти (занимают меньше места)
# - Быстрый доступ к элементам
# - Гарантия однотипности данных

# 4.2 Недостатки массивов:
# - Ограниченный набор типов
# - Нет поддержки разных типов в одном массиве
# - Меньше встроенных методов

# =============================================
# 5. Практические примеры
# =============================================

# 5.1 Чтение/запись в файл
with open('data.bin', 'wb') as f:
    arr_int.tofile(f)

with open('data.bin', 'rb') as f:
    new_arr = array('i')
    new_arr.fromfile(f, 2)  # Чтение 2 элементов

# 5.2 Математические операции
def sum_array(arr):
    return sum(arr)

print(sum_array(arr_float))  # 1.5 + 3.14 + 3.0 = 7.64

# 5.3 Фильтрация
filtered = array('d', (x for x in arr_float if x > 2.0))

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Модуль array обеспечивает эффективное хранение однотипных данных
2. Основные особенности:
   - Все элементы одного типа
   - Занимают меньше памяти, чем списки
   - Поддерживают базовые числовые типы
3. Типичные сценарии использования:
   - Работа с большими наборами числовых данных
   - Бинарная сериализация/десериализация
   - Интеграция с С/C++ библиотеками
4. Основные методы:
   - append(), extend(), insert()
   - remove(), pop()
   - index(), count()
   - tobytes(), frombytes()
5. Ограничения:
   - Не поддерживают объекты произвольных типов
   - Нет встроенной сортировки (используйте sorted())
6. Для работы с массивами рекомендуется:
   - Использовать для числовых данных
   - Избегать частых изменений размера
   - Использовать tolist() для сложных операций
7. При выборе между list и array:
   - List: для разнотипных данных и частых изменений
   - Array: для числовых данных и оптимизации памяти
"""