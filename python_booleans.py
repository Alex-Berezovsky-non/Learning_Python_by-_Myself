"""
КОНСПЕКТ ПО БУЛЕВЫМ ЗНАЧЕНИЯМ В PYTHON
Источник: https://www.w3schools.com/python/python_booleans.asp
"""

# =============================================
# 1. Основы булевых значений
# =============================================

# 1.1 Два константных значения: True и False (с большой буквы)
is_active = True
is_admin = False
print(type(is_active))  # <class 'bool'>

# 1.2 Булевы значения как подкласс int
print(True == 1)   # True (но не рекомендуется использовать как числа)
print(False == 0)  # True
print(True + 5)    # 6 (но так делать не стоит!)

# =============================================
# 2. Логические операторы
# =============================================

# 2.1 Логическое И (and)
print(True and True)    # True
print(True and False)   # False
print(5 > 2 and 3 < 5)  # True

# 2.2 Логическое ИЛИ (or)
print(False or True)    # True
print(False or False)   # False
print(5 < 2 or 3 < 5)   # True

# 2.3 Логическое НЕ (not)
print(not True)         # False
print(not 5 > 2)        # False

# =============================================
# 3. Truth Value Testing (Проверка истинности)
# =============================================

# 3.1 False-значения:
# - False
# - None
# - 0 (любой числовой тип)
# - пустые коллекции: "", [], {}, set()
# - объекты с __bool__() или __len__() возвращающими 0

print(bool(0))       # False
print(bool(""))      # False
print(bool([]))      # False
print(bool(None))    # False

# 3.2 True-значения:
# - Все остальные значения
print(bool(" "))     # True (пробел)
print(bool(-1))      # True
print(bool(["data"]))# True

# =============================================
# 4. Сравнение объектов
# =============================================

# 4.1 Операторы сравнения
print(5 == 5)    # True
print(5 != 3)    # True
print(2 > 1)     # True
print(5 <= 5)    # True

# 4.2 is vs ==
a = [1,2]
b = [1,2]
print(a == b)   # True (сравнение значений)
print(a is b)   # False (разные объекты в памяти)

# =============================================
# 5. Короткое замыкание (Short-Circuit Evaluation)
# =============================================

# 5.1 Пример с and: второй операнд проверяется только если первый True
def check():
    print("Checked!")
    return True

print(False and check())  # check() не выполнится
print(True or check())    # check() не выполнится

# 5.2 Практическое применение
user = None
# Безопасная проверка (не вызовет ошибку)
if user and user.is_admin:
    print("Admin access")

# =============================================
# 6. Булевы операции с разными типами
# =============================================

# 6.1 Цепочки сравнений
x = 5
print(0 < x <= 10)  # True (эквивалентно 0 < x and x <= 10)

# 6.2 Комбинирование типов
print(5 and "Hello")  # "Hello" (возвращает последний проверенный операнд)
print(0 or 42)        # 42

# =============================================
# 7. Практические примеры
# =============================================

# 7.1 Валидация данных
username = ""
password = "secret"
is_valid = bool(username) and bool(password)
print(is_valid)  # False

# 7.2 Тернарный оператор
age = 20
status = "Adult" if age >= 18 else "Minor"
print(status)  # Adult

# 7.3 Фильтрация списка
numbers = [0, 1, 2, 3, "", "data", None]
filtered = list(filter(bool, numbers))  # [1, 2, 3, 'data']

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Булевы значения: True/False (наследуются от int, но не стоит использовать как числа)
2. Логические операторы: and, or, not (возвращают булевы значения или операнды)
3. False-значения: 0, "", None, пустые коллекции
4. Операторы сравнения (==, !=, >, <, >=, <=) возвращают bool
5. is проверяет идентичность объектов, == - равенство значений
6. Короткое замыкание оптимизирует вычисления
7. Функция bool() преобразует значения в True/False
8. Тернарный оператор: x if condition else y
9. filter(bool, iterable) удаляет все False-значения
10. В логических выражениях: 0, "", None → False; все остальное → True
"""