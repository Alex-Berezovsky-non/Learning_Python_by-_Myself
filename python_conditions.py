"""
КОНСПЕКТ ПО УСЛОВНЫМ КОНСТРУКЦИЯМ В PYTHON
Источник: https://www.w3schools.com/python/python_conditions.asp
"""

# =============================================
# 1. Базовые условия (if, elif, else)
# =============================================

# 1.1 Простая проверка if
x = 20
if x > 10:
    print("x больше 10")

# 1.2 Полная конструкция if-elif-else
grade = 85
if grade >= 90:
    print("Отлично")
elif grade >= 75:
    print("Хорошо")  # Выполнится этот блок
elif grade >= 60:
    print("Удовлетворительно")
else:
    print("Неудовлетворительно")

# 1.3 Пустой блок (pass)
if x > 100:
    pass  # Заглушка для будущего кода
else:
    print("Условие не выполнено")

# =============================================
# 2. Логические операторы (and, or, not)
# =============================================

# 2.1 Комбинирование условий
age = 25
is_student = True
if age >= 18 and not is_student:
    print("Взрослый не студент")
elif age >= 18 or is_student:
    print("Взрослый или студент")  # Сработает здесь

# 2.2 Приоритет операторов: not > and > or
result = True or False and not True
print(result)  # True (эквивалентно True or (False and (not True)))

# =============================================
# 3. Тернарный оператор
# =============================================

# Сокращенная запись if-else
status = "Доступ разрешен" if age >= 18 else "Доступ запрещен"
print(status)  # Доступ разрешен

# Эквивалент:
if age >= 18:
    status = "Доступ разрешен"
else:
    status = "Доступ запрещен"

# =============================================
# 4. Вложенные условия
# =============================================

# 4.1 Многоуровневая проверка
num = 15
if num > 0:
    if num % 2 == 0:
        print("Положительное четное")
    else:
        print("Положительное нечетное")  # Выведет это
else:
    print("Число <= 0")

# 4.2 Комбинирование с логическими операторами
if num > 0 and num % 2 != 0:
    print("Положительное нечетное")  # Альтернативный вариант

# =============================================
# 5. Особенности проверки условий
# =============================================

# 5.1 Неявное преобразование к bool
values = [0, 1, "", "text", [], [1,2], None]

for val in values:
    if val:
        print(f"{val!r}: True")
    else:
        print(f"{val!r}: False")

# 5.2 Проверка на None (используйте is вместо ==)
value = None
if value is None:
    print("Значение не задано")

# 5.3 Цепочки сравнений
x = 15
if 10 < x < 20:
    print("x между 10 и 20")  # Сработает

# =============================================
# 6. Практические примеры
# =============================================

# 6.1 Проверка ввода пользователя
user_input = input("Введите число: ")
if user_input.isdigit():
    num = int(user_input)
    print(f"Квадрат числа: {num**2}")
else:
    print("Ошибка: введите целое число")

# 6.2 Калькулятор ИМТ
weight = 70
height = 1.75
bmi = weight / (height ** 2)

if bmi < 18.5:
    category = "Недостаточный вес"
elif 18.5 <= bmi < 25:
    category = "Норма"  # Предположим, что результат здесь
elif 25 <= bmi < 30:
    category = "Избыточный вес"
else:
    category = "Ожирение"

# 6.3 Фильтрация списка
numbers = [12, 5, 8, 19, 3]
filtered = [x for x in numbers if x > 10]  # [12, 19]

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Используйте отступы в 4 пробела для блоков кода внутри условий
2. Конструкции: 
   - if для одиночного условия
   - elif для дополнительных проверок
   - else для завершающего варианта
3. Логические операторы: and, or, not (приоритет: not > and > or)
4. Тернарный оператор: x if condition else y
5. Проверяйте None через is/is not (а не через ==)
6. Пустые объекты и ноль считаются False в условиях
7. Цепочки сравнений: 10 < x < 20 вместо x > 10 and x < 20
8. Избегайте глубокой вложенности (максимум 3-4 уровня)
9. Используйте bool() для явного преобразования в логический тип
10. PEP8 рекомендации:
    - После двоеточия ставить пробел: if x > 5:
    - Операторы окружать пробелами: if x == 5
    - Пустые строки между блоками кода
"""