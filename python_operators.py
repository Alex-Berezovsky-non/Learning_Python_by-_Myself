"""
КОНСПЕКТ ПО ОПЕРАТОРАМ В PYTHON
Источник: https://www.w3schools.com/python/python_operators.asp
"""

# =============================================
# 1. Типы операторов
# =============================================

# 1.1 Арифметические
# 1.2 Присваивания
# 1.3 Сравнения
# 1.4 Логические
# 1.5 Идентичности
# 1.6 Принадлежности
# 1.7 Битовые

# =============================================
# 2. Арифметические операторы
# =============================================
a, b = 10, 3

print(a + b)   # 13  (Сложение)
print(a - b)   # 7   (Вычитание)
print(a * b)   # 30  (Умножение)
print(a ** b)  # 1000 (Степень)
print(a / b)   # 3.3333333333333335 (Деление)
print(a // b)  # 3   (Целочисленное деление)
print(a % b)   # 1   (Остаток от деления)

# =============================================
# 3. Операторы присваивания
# =============================================
x = 5
x += 2    # x = 7 (аналог x = x + 2)
x **= 3   # x = 343 (7^3)
x %= 10   # x = 3 (343 % 10)

# Составные операторы работают с разными типами
s = "Hello"
s += " World"  # "Hello World"

# =============================================
# 4. Операторы сравнения
# =============================================
print(5 == 5)    # True
print(5 != 3)    # True
print(2 > 1)     # True
print(5 <= 5)    # True
print("a" < "b") # True (лексикографическое сравнение)

# =============================================
# 5. Логические операторы
# =============================================
# and: оба True
print(True and False)  # False 

# or: хотя бы один True
print(True or False)   # True

# not: инверсия
print(not True)        # False

# Короткое замыкание
def check():
    print("Checked!")
    return True

print(False and check())  # check() не выполнится

# =============================================
# 6. Операторы идентичности (is/is not)
# =============================================
lst1 = [1,2]
lst2 = [1,2]
print(lst1 is lst2)     # False (разные объекты)
print(lst1 is not lst2) # True

# Для примитивов (кеширование):
a = 256
b = 256
print(a is b)  # True (кеширование целых чисел)

# =============================================
# 7. Операторы принадлежности (in/not in)
# =============================================
words = ["apple", "banana"]
print("apple" in words)    # True
print("cherry" not in words)  # True

# Работает со строками
print("lo" in "hello")  # True

# =============================================
# 8. Битовые операторы
# =============================================
x, y = 5, 3  # 101, 011 в бинарном виде

print(x & y)   # 1  (AND: 101 & 011 = 001)
print(x | y)   # 7  (OR: 101 | 011 = 111)
print(x ^ y)   # 6  (XOR: 101 ^ 011 = 110)
print(~x)      # -6 (инверсия битов)
print(x << 1)  # 10 (сдвиг влево: 101 -> 1010)
print(x >> 1)  # 2  (сдвиг вправо: 101 -> 10)

# =============================================
# 9. Приоритет операторов
# =============================================
# От высшего к низшему:
# 1. ** 
# 2. ~ + - (унарные)
# 3. * / % //
# 4. + -
# 5. << >>
# 6. &
# 7. ^
# 8. |
# 9. Операторы сравнения
# 10. not
# 11. and
# 12. or

print(3 + 4 * 2 ** 2)  # 3 + (4*(2^2)) = 19

# =============================================
# 10. Практические примеры
# =============================================

# 10.1 Проверка диапазона
age = 25
if 18 <= age <= 65:
    print("Допуск разрешен")

# 10.2 Быстрое переключение статуса
is_active = True
is_active = not is_active  # Переключение состояния

# 10.3 Проверка уникальности элементов
items = [1,2,3,2]
print(len(items) == len(set(items)))  # False (есть дубли)

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Операторы присваивания: =, +=, -= и др. (изменяют переменную)
2. is vs ==: is проверяет идентичность объектов, == - равенство значений
3. Логические операторы: and, or, not (возвращают последний вычисленный операнд)
4. Приоритет: ** > * / > + - > сравнения > логические операторы
5. Битовые операции: работают с бинарным представлением чисел
6. in/not in: проверка наличия элемента в коллекции
7. Короткое замыкание: оптимизация вычислений
8. Составные операторы (+= и др.) работают с разными типами (str, list)
9. Унарные операторы: ~ (битовая инверсия), - (смена знака)
10. Тернарный оператор: x if condition else y (не упомянут в основном материале)
"""