"""
КОНСПЕКТ ПО ЦИКЛАМ WHILE В PYTHON
Источник: https://www.w3schools.com/python/python_while_loops.asp
"""

# =============================================
# 1. Базовый синтаксис
# =============================================

# 1.1 Простой цикл
counter = 0
while counter < 5:
    print(f"Итерация {counter}")
    counter += 1

# Вывод:
# Итерация 0
# Итерация 1
# ...
# Итерация 4

# 1.2 Бесконечный цикл (осторожно!)
# while True:
#     print("Этот цикл никогда не закончится!")

# =============================================
# 2. Управление потоком выполнения
# =============================================

# 2.1 Оператор break
num = 10
while num > 0:
    print(num)
    if num == 5:
        break  # Принудительный выход
    num -= 1

# Вывод: 10 9 8 7 6 5

# 2.2 Оператор continue
n = 0
while n < 5:
    n += 1
    if n % 2 == 0:
        continue  # Пропуск четных чисел
    print(n)

# Вывод: 1 3 5

# 2.3 Блок else
attempt = 3
while attempt > 0:
    print(f"Попыток осталось: {attempt}")
    attempt -= 1
else:
    print("Цикл завершен без прерываний")

# Вывод:
# Попыток осталось: 3
# Попыток осталось: 2
# Попыток осталось: 1
# Цикл завершен без прерываний

# =============================================
# 3. Практические примеры
# =============================================

# 3.1 Обработка пользовательского ввода
while True:
    user_input = input("Введите 'quit' для выхода: ")
    if user_input.lower() == "quit":
        break
    print(f"Вы ввели: {user_input}")

# 3.2 Поиск НОД (алгоритм Евклида)
a, b = 1071, 462
while b:
    a, b = b, a % b
print(f"НОД равен {a}")  # 21

# 3.3 Имитация do-while (Python не имеет отдельного синтаксиса)
flag = True
while flag or condition:
    flag = False
    # Тело цикла
    condition = False  # Условие для следующей итерации

# =============================================
# 4. Вложенные циклы
# =============================================

row = 0
while row < 3:
    col = 0
    while col < 3:
        print(f"({row},{col})", end=" ")
        col += 1
    print()  # Новая строка
    row += 1

# Вывод:
# (0,0) (0,1) (0,2)
# (1,0) (1,1) (1,2)
# (2,0) (2,1) (2,2)

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Цикл while выполняется, пока условие истинно
2. Обязательно обновляйте переменные условия внутри цикла
3. Операторы управления:
   - break: полный выход из цикла
   - continue: переход к следующей итерации
   - else: выполняется при нормальном завершении цикла
4. Отличие от for:
   - while: для неизвестного числа итераций
   - for: для итерации по коллекциям
5. Опасность бесконечных циклов: всегда проверяйте условие выхода
6. Паттерны использования:
   - Обработка пользовательского ввода
   - Ожидание внешних событий
   - Итерации с динамическим условием
7. Для эмуляции do-while используйте флаг перед циклом
8. Вложенные циклы позволяют работать с многомерными структурами
"""