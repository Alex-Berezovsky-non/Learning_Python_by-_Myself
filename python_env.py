"""
КОНСПЕКТ ПО ВИРТУАЛЬНЫМ ОКРУЖЕНИЯМ В PYTHON
Источник: https://www.w3schools.com/python/python_virtualenv.asp
"""

# =============================================
# 1. Что такое виртуальные окружения?
# =============================================

# Виртуальное окружение - изолированная среда для Python проектов:
# - Позволяет устанавливать пакеты отдельно для каждого проекта
# - Решает проблему конфликтов версий пакетов
# - Позволяет иметь разные версии Python для разных проектов

# Зачем нужны:
# - Проект A требует Django 3.x
# - Проект B требует Django 4.x
# - Без виртуальных окружений возникает конфликт версий

# =============================================
# 2. Создание и использование venv
# =============================================

# 2.1 Создание окружения
# В командной строке:
# python -m venv myenv

# Структура созданных файлов:
# myenv/
# ├── bin/        # Скрипты активации (Linux/Mac)
# ├── Scripts/    # Скрипты активации (Windows)
# ├── Include/    # Заголовочные файлы C
# └── Lib/        # Установленные пакеты

# 2.2 Активация окружения
# Windows:
# myenv\Scripts\activate.bat

# Linux/Mac:
# source myenv/bin/activate

# Признак активации: (myenv) в начале командной строки

# 2.3 Деактивация
# deactivate

# =============================================
# 3. Управление пакетами в окружении
# =============================================

# 3.1 Установка пакетов
# pip install package_name

# 3.2 Просмотр установленных пакетов
# pip list

# 3.3 Экспорт зависимостей
# pip freeze > requirements.txt

# 3.4 Установка из requirements.txt
# pip install -r requirements.txt

# 3.5 Удаление пакета
# pip uninstall package_name

# =============================================
# 4. Альтернатива: virtualenv (legacy)
# =============================================

# 4.1 Установка
# pip install virtualenv

# 4.2 Создание окружения
# virtualenv myenv

# 4.3 Основные отличия от venv:
# - Работает на Python 2 и 3
# - Требует отдельной установки
# - Быстрее обновляется с новыми функциями
# - venv - стандартный модуль Python 3.3+

# =============================================
# 5. Продвинутые сценарии
# =============================================

# 5.1 Создание окружения с другой версией Python
# virtualenv -p /usr/bin/python3.8 myenv

# 5.2 Копирование пакетов из глобального окружения
# virtualenv --system-site-packages myenv

# 5.3 Создание минимального окружения
# python -m venv --without-pip myenv

# 5.4 Обновление pip в окружении
# python -m pip install --upgrade pip

# =============================================
# 6. Интеграция с IDE
# =============================================

# 6.1 VS Code:
# - Открыть папку проекта
# - Выбрать интерпретатор: Ctrl+Shift+P → "Python: Select Interpreter"
# - Выбрать python из папки venv

# 6.2 PyCharm:
# - Автоматически предлагает создать venv при создании проекта
# - Или: File → Settings → Project → Python Interpreter → ⚙ → Add

# 6.3 Jupyter Notebook:
# pip install ipykernel
# python -m ipykernel install --user --name=myenv

# =============================================
# 7. Практические примеры
# =============================================

# 7.1 Типичный рабочий процесс:
"""
# Создать проект
mkdir myproject
cd myproject

# Создать окружение
python -m venv venv

# Активировать
# Windows: venv\Scripts\activate
# Linux/Mac: source venv/bin/activate

# Установить зависимости
pip install django pandas

# Зафиксировать версии
pip freeze > requirements.txt

# Работать над проектом...

# Деактивировать при завершении
deactivate
"""

# 7.2 Восстановление окружения на другом компьютере:
"""
git clone project-url
cd project

# Создать окружение
python -m venv venv

# Активировать
source venv/bin/activate   # или venv\Scripts\activate для Windows

# Установить зависимости
pip install -r requirements.txt
"""

# 7.3 Создание окружения для разных версий Python
"""
# Для Python 3.7
python3.7 -m venv venv37

# Для Python 3.10
python3.10 -m venv venv310
"""

# =============================================
# 8. Управление несколькими окружениями
# =============================================

# 8.1 direnv (автоматическая активация)
# https://direnv.net/

# 8.2 pyenv (управление версиями Python)
# https://github.com/pyenv/pyenv

# 8.3 pipenv (менеджер окружений + пакетов)
# https://pipenv.pypa.io/

# 8.4 poetry (современная замена pip и venv)
# https://python-poetry.org/

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Основные команды:
   - python -m venv <name> - создание окружения
   - source <name>/bin/activate - активация (Linux/Mac)
   - <name>\Scripts\activate - активация (Windows)
   - deactivate - деактивация

2. Преимущества:
   - Изоляция зависимостей проектов
   - Отсутствие конфликтов версий
   - Возможность иметь разные версии Python
   - Чистая система без глобальных установок

3. Best practices:
   - Всегда используйте виртуальные окружения
   - Называйте окружение venv или .venv
   - Добавляйте venv/ в .gitignore
   - Фиксируйте зависимости в requirements.txt
   - Обновляйте зависимости командой pip freeze > requirements.txt

4. Структура проекта:
   my_project/
   ├── venv/          # Виртуальное окружение
   ├── .gitignore      # Игнорирует venv/
   ├── requirements.txt # Зависимости
   └── src/            # Исходный код
       └── app.py

5. Распространенные ошибки:
   - Активация окружения из другой директории
   - Забывание активировать окружение
   - Коммит окружения в git (venv в репозитории)
   - Использование глобального pip при активированном окружении

6. Альтернативные инструменты:
   - virtualenv: для старых версий Python
   - pipenv: объединяет pip и virtualenv
   - poetry: современное управление зависимостями
   - conda: для научных вычислений

7. Для production:
   - Используйте Docker для полной изоляции
   - Создавайте минимальные образы
   - Фиксируйте версии всех зависимостей
   - Используйте multi-stage builds

8. Проверка активации:
   - Команда which python (Linux/Mac)
   - Команда where python (Windows)
   - Должна показывать путь внутри venv
"""