"""
КОНСПЕКТ ПО ТИПАМ ДАННЫХ В PYTHON
Источник: https://www.w3schools.com/python/python_datatypes.asp
"""

# =============================================
# 1. Основные встроенные типы данных
# =============================================

# 1.1 Категории типов:
# - Текст:          str
# - Числовые:       int, float, complex
# - Последовательности: list, tuple, range
# - Отображения:    dict
# - Множества:      set, frozenset
# - Булевы:         bool
# - Бинарные:       bytes, bytearray, memoryview
# - None:           NoneType

# 1.2 Проверка типа данных
print(type(5))           # > <class 'int'>
print(isinstance(3.14, float))  # > True

# =============================================
# 2. Текстовый тип (str)
# =============================================
text = "Hello World"
multiline = '''Это многострочная
строка с апострофами ' и кавычками "'''

# Методы строк:
print(text.upper())      # HELLO WORLD
print(text.split())      # ['Hello', 'World']

# =============================================
# 3. Числовые типы
# =============================================

# 3.1 Целые числа (int)
x = 10
y = -500

# 3.2 Числа с плавающей точкой (float)
pi = 3.1415
sci = 2.5e4  # 25000.0

# 3.3 Комплексные числа (complex)
comp = 3 + 5j
print(comp.real)  # 3.0
print(comp.imag)  # 5.0

# =============================================
# 4. Последовательности
# =============================================

# 4.1 Списки (list) - изменяемые
fruits = ["apple", "banana", "cherry"]
fruits.append("orange")
print(fruits[1])  # banana

# 4.2 Кортежи (tuple) - неизменяемые
colors = ("red", "green", "blue","brown","orange")
# colors[0] = "pink"  # Вызовет ошибку

# 4.3 Диапазоны (range)
nums = range(5)        # 0-4
even = range(2, 10, 2) # 2,4,6,8

# =============================================
# 5. Словари (dict)
# =============================================
user = {
    "name": "Alice",
    "age": 30,
    "is_verified": True
}
print(user["name"])      # Alice
user["email"] = "alice@mail.com"

# =============================================
# 6. Множества
# =============================================

# 6.1 set - изменяемое множество
unique_nums = {1, 2, 3, 3, 2}  # {1, 2, 3}
unique_nums.add(4)

# 6.2 frozenset - неизменяемое
frozen = frozenset({1, 2, 3})

# =============================================
# 7. Булев тип (bool)
# =============================================
is_valid = True
has_access = False

# Логические операции
print(5 > 3 and 2 == 2)  # True

# =============================================
# 8. Бинарные типы
# =============================================

# 8.1 bytes - неизменяемые
b = b"hello"

# 8.2 bytearray - изменяемые
ba = bytearray(5)  # bytearray(b'\x00\x00\x00\x00\x00')

# 8.3 memoryview - доступ к памяти объектов
mv = memoryview(bytes(5))
print(mv[0])  # 0

# =============================================
# 9. NoneType
# =============================================
empty_value = None
print(type(None))  # <class 'NoneType'>

# =============================================
# 10. Преобразование типов
# =============================================

# 10.1 Явное преобразование
num_str = "123"
num_int = int(num_str)    # 123
num_float = float("3.14") # 3.14

# 10.2 Примеры преобразований
print(list("hello"))      # ['h', 'e', 'l', 'l', 'o']
print(tuple([1,2,3]))     # (1, 2, 3)
print(set((1,2,1)))       # {1, 2}

# =============================================
# 11. Особенности типов
# =============================================

# 11.1 Изменяемые vs Неизменяемые
# - Изменяемые: list, dict, set, bytearray
# - Неизменяемые: int, float, str, tuple, frozenset, bytes

# Пример с неизменяемым типом
a = "Hello"
# a[0] = "h"  # Ошибка: строки неизменяемы

# Пример с изменяемым типом
lst = [1, 2, 3]
lst[0] = 100  # Допустимо

# 11.2 Хешируемость (важно для ключей словарей)
# Только неизменяемые типы могут быть ключами
valid_dict = {
    "name": "John", 
    123: "number",
    (1,2): "tuple_key"
}

# invalid_dict = {[1,2]: "list_key"}  # Ошибка

# =============================================
# 12. Практические примеры
# =============================================

# 12.1 Работа с разными типами
coordinates = (40.7128, -74.0060)  # tuple
user_data = {
    "username": "coder123",
    "posts": 45,
    "tags": ["python", "web"]
}

# 12.2 Проверка типа в условиях
value = 3.14
if isinstance(value, (int, float)):
    print("Это число!")

# 12.3 Генерация диапазонов
for i in range(3, 8, 2):  # 3,5,7
    print(f"Number: {i}")

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Python имеет динамическую типизацию
2. Основные группы: числовые, текстовые, коллекции, булевы, бинарные
3. Изменяемые типы: list, dict, set, bytearray
4. Для проверки типа используйте type() и isinstance()
5. Преобразование типов выполняется функциями-конструкторами (int(), str() и т.д.)
6. None - специальный тип для обозначения отсутствия значения
7. Кортежи и строки - неизменяемые последовательности
8. Словари используют хешируемые ключи (неизменяемые типы)
"""