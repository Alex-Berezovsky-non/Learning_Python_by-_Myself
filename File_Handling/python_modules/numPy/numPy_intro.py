"""
КОНСПЕКТ ПО ВВЕДЕНИЮ В NUMPY
Источник: https://www.w3schools.com/python/numpy/numpy_intro.asp
"""

import numpy as np

# =============================================
# 1. ЧТО ТАКОЕ NUMPY?
# =============================================

"""
NumPy - фундаментальная библиотека для научных вычислений в Python.
Основные особенности:
- Поддержка многомерных массивов (ndarray)
- Быстрые математические операции
- Интеграция с C/C++ и Fortran
- Основы для многих других научных библиотек
"""

# =============================================
# 2. ПРЕИМУЩЕСТВА NUMPY ПЕРЕД СПИСКАМИ PYTHON
# =============================================

# 2.1 Сравнение скорости
import time

# Создаем большой список и массив
py_list = list(range(1000000))
np_array = np.arange(1000000)

# Тест скорости суммирования
start = time.time()
sum(py_list)
print(f"Python list: {time.time() - start:.5f} сек")

start = time.time()
np.sum(np_array)
print(f"NumPy array: {time.time() - start:.5f} сек")

"""
Результат покажет, что NumPy работает значительно быстрее
(разница может быть в 10-100 раз)
"""

# 2.2 Другие преимущества
"""
- Меньший объем используемой памяти
- Удобные математические операции
- Встроенная поддержка линейной алгебры
- Широкие возможности индексации
"""

# =============================================
# 3. ОСНОВЫ РАБОТЫ С МАССИВАМИ
# =============================================

# 3.1 Создание массивов
try:
    # Из списка Python
    arr1 = np.array([1, 2, 3, 4, 5])
    
    # Многомерный массив
    arr2 = np.array([[1, 2, 3], [4, 5, 6]])
    
    # Специальные массивы
    zeros = np.zeros((2, 3))  # Матрица 2x3 из нулей
    ones = np.ones(5)         # Вектор из 5 единиц
    
    print("Успешно созданы массивы:")
    print(arr1)
    print(arr2)
    print(zeros)
    print(ones)
except Exception as e:
    print(f"Ошибка создания массивов: {e}")

# 3.2 Атрибуты массивов
arr = np.array([[1, 2, 3], [4, 5, 6]])

try:
    print("\nХарактеристики массива:")
    print("Размерность:", arr.ndim)     # 2
    print("Форма:", arr.shape)          # (2, 3)
    print("Тип данных:", arr.dtype)     # int64
    print("Размер:", arr.size)          # 6 элементов
except AttributeError:
    print("Ошибка доступа к атрибутам массива")

# =============================================
# 4. ОСНОВНЫЕ ОПЕРАЦИИ
# =============================================

# 4.1 Математические операции
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

try:
    print("\nМатематические операции:")
    print("Сложение:", a + b)       # [5 7 9]
    print("Умножение:", a * 2)      # [2 4 6]
    print("Скалярное произведение:", np.dot(a, b))  # 32
except ValueError as ve:
    print(f"Ошибка в операциях: {ve}")

# 4.2 Индексация и срезы
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

try:
    print("\nИндексация:")
    print("Элемент [1,2]:", arr[1, 2])   # 6
    print("Первая строка:", arr[0, :])    # [1 2 3]
    print("Последний столбец:", arr[:, -1]) # [3 6 9]
except IndexError:
    print("Ошибка индексации")

# =============================================
# 5. ПРИМЕРЫ ПРИМЕНЕНИЯ
# =============================================

# 5.1 Обработка данных
data = np.random.rand(100) * 100  # 100 случайных чисел

try:
    print("\nОбработка данных:")
    print("Среднее значение:", np.mean(data))
    print("Медиана:", np.median(data))
    print("Стандартное отклонение:", np.std(data))
except Exception as e:
    print(f"Ошибка обработки данных: {e}")

# 5.2 Линейная алгебра
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

try:
    print("\nЛинейная алгебра:")
    print("Матричное умножение:\n", A @ B)
    print("Определитель A:", np.linalg.det(A))
except np.linalg.LinAlgError:
    print("Ошибка линейной алгебры")

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Основные преимущества NumPy:
   - Высокая производительность
   - Удобные математические операции
   - Эффективное хранение данных

2. Главные структуры данных:
   - ndarray - многомерный массив
   - Специальные массивы (нули, единицы и т.д.)

3. Важные особенности:
   - Векторизованные операции (без циклов)
   - Широкие возможности индексации
   - Интеграция с другими библиотеками

4. Основные применения:
   - Научные вычисления
   - Обработка данных
   - Машинное обучение
   - Компьютерное зрение

5. Рекомендации:
   - Используйте NumPy вместо списков для числовых операций
   - Изучите документацию по ndarray
   - Освойте базовые операции линейной алгебры

6. Дальнейшее изучение:
   - Индексация и срезы
   - Трансляция (broadcasting)
   - Векторизация кода
   - Работа с файлами
"""