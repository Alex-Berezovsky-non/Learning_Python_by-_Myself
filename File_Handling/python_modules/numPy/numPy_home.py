"""
КОНСПЕКТ ПО NUMPY В PYTHON
Источник: https://www.w3schools.com/python/numpy/default.asp
"""

import numpy as np

# =============================================
# 1. СОЗДАНИЕ МАССИВОВ
# =============================================

# 1.1 Базовые методы создания
try:
    arr1 = np.array([1, 2, 3])  # Из списка
    print("Массив создан успешно:", arr1)
except Exception as e:
    print(f"Ошибка создания массива: {e}")

# 1.2 Специальные массивы
try:
    zeros = np.zeros((2, 3))    # Матрица 2x3 из нулей
    ones = np.ones(4)           # Вектор из единиц
    empty = np.empty(3)         # Неинициализированный массив
    print(f"Нулевая матрица:\n{zeros}\nВектор единиц: {ones}")
except Exception as e:
    print(f"Ошибка создания специальных массивов: {e}")

# =============================================
# 2. ОПЕРАЦИИ С МАССИВАМИ
# =============================================

# 2.1 Базовые операции
arr = np.array([[1, 2], [3, 4]])
try:
    print("Сумма элементов:", np.sum(arr))
    print("Максимальный элемент:", np.max(arr))
    print("Среднее значение:", np.mean(arr))
except Exception as e:
    print(f"Ошибка вычислений: {e}")

# 2.2 Индексация и срезы
try:
    print("Элемент [1,0]:", arr[1, 0])
    print("Первая строка:", arr[0, :])
    print("Последний столбец:", arr[:, -1])
except IndexError:
    print("Ошибка индексации: неверный индекс")
except Exception as e:
    print(f"Ошибка работы с массивом: {e}")

# =============================================
# 3. МАТРИЧНЫЕ ОПЕРАЦИИ
# =============================================

# 3.1 Линейная алгебра
mat_a = np.array([[1, 2], [3, 4]])
mat_b = np.array([[5, 6], [7, 8]])

try:
    print("Матричное умножение:\n", mat_a @ mat_b)
    print("Транспонированная матрица:\n", mat_a.T)
    print("Определитель:", np.linalg.det(mat_a))
except np.linalg.LinAlgError:
    print("Ошибка линейной алгебры: сингулярная матрица")
except Exception as e:
    print(f"Ошибка матричных операций: {e}")

# =============================================
# 4. РАБОТА С ФАЙЛАМИ
# =============================================

# 4.1 Сохранение и загрузка
try:
    np.save("numpy_array.npy", arr)
    loaded = np.load("numpy_array.npy")
    print("Массив успешно сохранен и загружен")
except IOError:
    print("Ошибка работы с файлом")
except Exception as e:
    print(f"Ошибка сохранения/загрузки: {e}")

# =============================================
# 5. ПРАКТИЧЕСКИЕ ПРИМЕРЫ
# =============================================

# 5.1 Генерация случайных данных
try:
    random_data = np.random.normal(0, 1, 100)
    print("Сгенерировано 100 случайных чисел")
except Exception as e:
    print(f"Ошибка генерации данных: {e}")

# 5.2 Решение системы уравнений
try:
    A = np.array([[3, 1], [1, 2]])
    b = np.array([9, 8])
    x = np.linalg.solve(A, b)
    print("Решение системы уравнений:", x)
except np.linalg.LinAlgError:
    print("Система не имеет решения")
except Exception as e:
    print(f"Ошибка решения системы: {e}")

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Основные методы создания массивов:
   - np.array() - из списка Python
   - np.zeros()/ones()/empty() - специальные массивы
   - np.arange()/linspace() - последовательности

2. Важные операции:
   - Индексация и срезы (arr[1, 0], arr[:, 1])
   - Агрегатные функции (sum(), max(), mean())
   - Изменение формы (reshape()) и размерности

3. Матричные операции:
   - @ или np.dot() - матричное умножение
   - np.linalg.inv() - обратная матрица
   - np.linalg.solve() - решение СЛАУ

4. Работа с файлами:
   - np.save()/np.load() - бинарное сохранение
   - np.savetxt()/np.loadtxt() - текстовые файлы

5. Best practices:
   - Всегда проверяйте размерности (shape)
   - Используйте векторные операции вместо циклов
   - Обрабатывайте исключения LinAlgError для матриц

6. Особенности:
   - NumPy массивы имеют фиксированный тип
   - Операции выполняются быстрее чем с списками Python
   - Поддержка многомерных массивов

7. Предупреждения:
   - Изменение среза меняет исходный массив
   - Несоответствие размерностей вызывает ошибки
   - Большие массивы потребляют много памяти

8. Альтернативы:
   - Для таблиц: Pandas (основан на NumPy)
   - Для научных вычислений: SciPy
   - Для машинного обучения: TensorFlow/PyTorch
"""