"""
КОНСПЕКТ ПО ФОРМАТИРОВАНИЮ СТРОК В PYTHON
Источник: https://www.w3schools.com/python/python_string_formatting.asp
"""

# =============================================
# 1. Основные методы форматирования
# =============================================

# 1.1 Оператор % (старый стиль)
name = "Alice"
age = 30
print("Имя: %s, Возраст: %d" % (name, age))  # Имя: Alice, Возраст: 30

# Форматы:
# %s - строка
# %d - целое число
# %f - число с плавающей точкой
# %.2f - число с 2 знаками после запятой

# 1.2 Метод str.format() (Python 3+)
print("Имя: {}, Возраст: {}".format(name, age))  # Имя: Alice, Возраст: 30
print("Имя: {1}, Возраст: {0}".format(age, name))  # Позиционные аргументы
print("Имя: {name}, Возраст: {age}".format(name="Bob", age=25))  # Именованные аргументы

# 1.3 f-строки (Python 3.6+)
print(f"Имя: {name}, Возраст: {age}")  # Имя: Alice, Возраст: 30

# =============================================
# 2. Форматирование чисел
# =============================================

pi = 3.1415926535
number = 1234567.8912

# 2.1 Ограничение знаков после запятой
print(f"π ≈ {pi:.2f}")         # 3.14
print("π ≈ {:.4f}".format(pi)) # 3.1416

# 2.2 Форматирование больших чисел
print(f"{number:,}")           # 1,234,567.8912
print("{:,.2f}".format(number)) # 1,234,567.89

# 2.3 Проценты
score = 0.8567
print(f"Результат: {score:.1%}") # Результат: 85.7%

# 2.4 Шестнадцатеричный и двоичный формат
num = 255
print(f"Hex: {num:x}")        # ff
print("Bin: {:b}".format(num)) # 11111111

# =============================================
# 3. Выравнивание текста
# =============================================

text = "Python"
width = 10

# 3.1 Выравнивание по левому краю
print(f"|{text:<{width}}|")  # |Python    |

# 3.2 Выравнивание по правому краю
print(f"|{text:>{width}}|")  # |    Python|

# 3.3 Центрирование
print(f"|{text:^{width}}|")  # |  Python  |

# 3.4 Заполнение символами
print(f"|{text:_^{width}}|") # |__Python__|

# =============================================
# 4. Форматирование дат и времени
# =============================================

from datetime import datetime
now = datetime.now()

# 4.1 Стандартное форматирование
print(f"Сейчас: {now:%d.%m.%Y %H:%M}") # Сейчас: 04.08.2023 14:30

# 4.2 Локализованное форматирование
import locale
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
print(f"Сегодня: {now:%d %B %Y}") # Сегодня: 04 августа 2023

# =============================================
# 5. Продвинутые техники
# =============================================

# 5.1 Форматирование словарей
person = {"name": "Charlie", "age": 35}
print("Имя: {name}, Возраст: {age}".format(**person))

# 5.2 Форматирование классов
class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email
        
user = User("David", "david@example.com")
print(f"Пользователь: {user.name} <{user.email}>")

# 5.3 Вычисления внутри f-строк
a, b = 5, 3
print(f"{a} * {b} = {a*b}") # 5 * 3 = 15

# 5.4 Многострочные f-строки
name = "Eva"
profession = "инженер"
message = (
    f"Имя: {name}\n"
    f"Профессия: {profession}\n"
    f"Компания: {'ACME Inc.'}"
)
print(message)

# =============================================
# 6. Практические примеры
# =============================================

# 6.1 Форматирование таблицы
headers = ["Продукт", "Цена", "Количество"]
data = [
    ["Яблоки", 85.50, 10],
    ["Бананы", 120.00, 5],
    ["Апельсины", 95.75, 8]
]

print(f"| {headers[0]:^10} | {headers[1]:^10} | {headers[2]:^10} |")
print("|" + "-"*12 + "|" + "-"*12 + "|" + "-"*12 + "|")
for item in data:
    print(f"| {item[0]:<10} | {item[1]:>10.2f} | {item[2]:^10} |")

# 6.2 Генератор отчетов
def generate_report(user, balance, transactions):
    return f"""
Отчет по счету
--------------
Клиент: {user['name']}
Баланс: ${balance:,.2f}

Последние операции:
{'\n'.join(
    f"{t['date']} - {t['description']:30} ${t['amount']:>10,.2f}"
    for t in transactions
)}
"""

# 6.3 Шаблонизатор
def render_template(template, **context):
    return template.format(**context)

template = "Привет, {name}! Твой заказ #{order_id} готов."
print(render_template(template, name="Frank", order_id=12345))

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Основные методы:
   - % оператор: устаревший, но используется в legacy коде
   - str.format(): гибкий метод, поддерживает позиционные и именованные аргументы
   - f-строки: современный способ (Python 3.6+), самый читаемый и производительный

2. Форматирование чисел:
   - :.2f - 2 знака после запятой
   :, - разделитель тысяч
   :% - процентный формат
   :b, :x - двоичный и шестнадцатеричный формат

3. Выравнивание текста:
   - < - по левому краю
   > - по правому краю
   ^ - центрирование
   После : можно указать символ заполнения

4. Форматирование дат:
   - Используйте %d, %m, %Y, %H, %M и др. внутри f-строк
   - Для локализации используйте модуль locale

5. Продвинутые возможности:
   - Работа со словарями: ** распаковка
   - Доступ к атрибутам объектов: {obj.attr}
   - Вычисления внутри f-строк: {a*b}
   - Многострочные f-строки

6. Best practices:
   - Для нового кода используйте f-строки
   - Для сложных шаблонов используйте str.format()
   - Избегайте % оператора в новом коде
   - Форматируйте большие числа для читаемости
   - Используйте выравнивание для табличных данных

7. Производительность:
   - f-строки быстрее других методов
   - str.format() медленнее f-строк, но гибче
   - % оператор - самый медленный

8. Применение:
   - Генерация отчетов
   - Форматирование сообщений для пользователя
   - Создание табличных данных
   - Логирование с форматированием
   - Шаблонизация простых документов
"""