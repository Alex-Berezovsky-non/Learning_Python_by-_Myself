"""
КОНСПЕКТ ПО МОДУЛЯМ В PYTHON
Источник: https://www.w3schools.com/python/python_modules.asp
"""

# =============================================
# 1. Основные концепции модулей
# =============================================

# Модуль = файл с расширением .py, содержащий код на Python

# 1.1 Создание модуля
# Создайте файл mymodule.py с содержимым:
"""
# mymodule.py
def greeting(name):
    return f"Hello, {name}!"

person = {"name": "Alice", "age": 30}
"""

# 1.2 Импорт модуля
import mymodule

print(mymodule.greeting("Bob"))  # Hello, Bob!
print(mymodule.person["name"])   # Alice

# =============================================
# 2. Варианты импорта
# =============================================

# 2.1 Импорт с псевдонимом
import math as m
print(m.sqrt(16))  # 4.0

# 2.2 Импорт конкретных элементов
from datetime import datetime, timedelta
print(datetime.now())  # Текущая дата и время

# 2.3 Импорт всех элементов (не рекомендуется)
from random import *
print(randint(1, 10))  # Случайное число

# =============================================
# 3. Встроенные модули Python
# =============================================

# 3.1 Модуль math
import math
print(math.pi)           # 3.141592653589793
print(math.floor(3.7))   # 3

# 3.2 Модуль platform
import platform
print(platform.system())  # Windows/Linux/Darwin

# 3.3 Модуль os
import os
print(os.getcwd())       # Текущая рабочая директория

# 3.4 Модуль sys
import sys
print(sys.version)       # Версия Python

# =============================================
# 4. Создание и использование пакетов
# =============================================

# 4.1 Структура пакета:
"""
mypackage/
    __init__.py
    module1.py
    module2.py
    subpackage/
        __init__.py
        module3.py
"""

# 4.2 Импорт из пакета
# from mypackage import module1
# from mypackage.subpackage import module3

# =============================================
# 5. Специальный файл __init__.py
# =============================================

# Используется для:
# - Объявления пакета
# - Импорта подмодулей при загрузке пакета
# - Определения __all__ для from package import *

# Пример содержимого:
"""
# mypackage/__init__.py
from .module1 import main_function
__all__ = ['module1', 'module2']
"""

# =============================================
# 6. Пути поиска модулей
# =============================================

# 6.1 Просмотр путей поиска
import sys
print(sys.path)

# 6.2 Добавление своего пути
sys.path.append("/path/to/my/modules")

# 6.3 Поиск модулей происходит в порядке:
# 1. Текущая директория
# 2. Встроенные модули
# 3. Пути в sys.path

# =============================================
# 7. Практические примеры
# =============================================

# 7.1 Создание собственного модуля утилит
# utils.py:
"""
def format_phone(number):
    return f"+1-{number[:3]}-{number[3:6]}-{number[6:]}"
"""

# main.py:
"""
import utils
print(utils.format_phone("1234567890"))  # +1-123-456-7890
"""

# 7.2 Работа с пакетом
# from mypackage.calculator import add, multiply

# 7.3 Перезагрузка модуля (для разработки)
import importlib
importlib.reload(mymodule)

# =============================================
# 8. Виртуальные окружения
# =============================================

# Создание: python -m venv myenv
# Активация:
#   Windows: myenv\Scripts\activate
#   Unix: source myenv/bin/activate

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Модули:
   - Файлы .py с кодом Python
   - Организуют код в логические блоки
   - Позволяют повторное использование кода

2. Импорт:
   - import module - полный импорт
   - from module import name - импорт конкретных имен
   - import module as alias - импорт с псевдонимом

3. Пакеты:
   - Директории с файлом __init__.py
   - Могут содержать подпакеты
   - Организуют связанные модули

4. Пути поиска:
   - sys.path определяет места поиска модулей
   - Можно добавлять свои пути
   - Порядок поиска: текущая директория → sys.path

5. Встроенные модули:
   - math: математические функции
   - datetime: работа с датой и временем
   - os: взаимодействие с ОС
   - random: генерация случайных чисел

6. Best practices:
   - Избегайте from module import * 
   - Используйте виртуальные окружения для изоляции
   - Документируйте свои модули
   - Разделяйте код по функциональности

7. Особенности:
   - Модуль выполняется при первом импорте
   - Повторный импорт использует кэш
   - __name__ == "__main__" для исполняемых модулей

8. Распространение:
   - Упаковка в wheel: python setup.py bdist_wheel
   - Публикация в PyPI: twine upload dist/*
"""