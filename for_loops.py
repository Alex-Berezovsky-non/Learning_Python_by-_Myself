"""
КОНСПЕКТ ПО ЦИКЛАМ FOR В PYTHON
Источник: https://www.w3schools.com/python/python_for_loops.asp
"""

# =============================================
# 1. Базовый синтаксис
# =============================================

# 1.1 Итерация по коллекциям
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)  # apple -> banana -> cherry

# 1.2 Итерация по строкам
for char in "Python":
    print(char, end=" ")  # P y t h o n 

# 1.3 Функция range()
for i in range(3):
    print(i)  # 0 1 2

for i in range(2, 5):
    print(i)  # 2 3 4

for i in range(0, 10, 2):
    print(i, end=" ")  # 0 2 4 6 8

# =============================================
# 2. Управление выполнением цикла
# =============================================

# 2.1 Оператор break
for num in [1, 2, 3, 4, 5]:
    if num == 3:
        break
    print(num)  # 1 2

# 2.2 Оператор continue
for num in range(5):
    if num % 2 == 0:
        continue
    print(num)  # 1 3

# 2.3 Блок else
for i in range(3):
    print(i)
else:
    print("Цикл завершен")  # 0 1 2 Цикл завершен

# =============================================
# 3. Продвинутые техники
# =============================================

# 3.1 enumerate() - получение индекса и значения
for idx, value in enumerate(["a", "b", "c"]):
    print(f"{idx}: {value}")  # 0: a → 1: b → 2: c

# 3.2 zip() - параллельная итерация
names = ["Alice", "Bob"]
ages = [25, 30]
for name, age in zip(names, ages):
    print(f"{name}: {age}")  # Alice:25 → Bob:30

# 3.3 Вложенные циклы
for i in range(3):
    for j in range(2):
        print(f"({i},{j})", end=" ")  # (0,0) (0,1) (1,0) ...

# =============================================
# 4. Генераторы коллекций
# =============================================

# 4.1 List comprehension
squares = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]

# 4.2 Dict comprehension
square_dict = {x: x**2 for x in range(3)}  # {0:0, 1:1, 2:4}

# 4.3 Фильтрация
even_squares = [x**2 for x in range(10) if x % 2 == 0]  # [0,4,16,36,64]

# =============================================
# 5. Практические примеры
# =============================================

# 5.1 Обход словаря
person = {"name": "Alice", "age": 30, "city": "Paris"}
for key, value in person.items():
    print(f"{key}: {value}")

# 5.2 Обработка файлов
with open("data.txt") as file:
    for line_num, line in enumerate(file, 1):
        print(f"{line_num}: {line.strip()}")

# 5.3 Matrix traversal
matrix = [[1,2], [3,4], [5,6]]
for row in matrix:
    for num in row:
        print(num * 2, end=" ")  # 2 4 6 8 10 12

"""
КЛЮЧЕВЫЕ ТЕЗИСЫ:
1. Используется для итерации по итерируемым объектам (списки, строки, словари и т.д.)
2. Основные компоненты:
   - break: прерывание цикла
   - continue: пропуск текущей итерации
   - else: выполняется при нормальном завершении
3. Функции для работы с циклами:
   - range(): генерация числовых последовательностей
   - enumerate(): получение индексов и значений
   - zip(): параллельная итерация
4. Генераторы коллекций позволяют создавать коллекции в одну строку
5. Отличия от while:
   - for: конечное число итераций, работа с коллекциями
   - while: выполнение по условию, потенциально бесконечный цикл
6. Эффективен для:
   - Обработки элементов коллекций
   - Преобразований данных
   - Работы с вложенными структурами
7. Всегда проверяйте итератор на предмет бесконечных циклов
8. Для сложных условий используйте комбинацию for + if
"""